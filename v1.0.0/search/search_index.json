{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#fair-python-cookiecutter","title":"fair-python-cookiecutter","text":"<p>An opinionated cookiecutter template to kickstart a modern best-practice Python project with FAIR metadata.</p> <p></p> <p>Check out the demo repository generated from this template!</p>"},{"location":"#overview","title":"Overview","text":"<p>Are you a researcher or research software engineer?</p> <p>Did you somehow end up developing Python tools and libraries as part of your job?</p> <p>Are you overwhelmed and confused by the increasing demands to research software?</p> <p>Regardless whether you are just planning to start a new software project, or you just look for ideas about how you could improve its quality - this template is for you!</p> <p>Unlike myriads of other templates, this template targets the typical case in academia - you built some nice little tool or library for your scientific community, and hope that others have a good experience - you want to provide a quality product that others enjoy using. In case they actually do use it with some success, you might also like to be acknowledged - for example, by having your tool cited.</p> <p>To ensure quality, there are many best practices and recommendations for software development on various levels, both general as well as Python-specific. To help others find your project and also enable them to cite it, there are also recommendations concerning your software project metadata. In fact, there are so many recommendations that it can be hard to keep up and easy to become overwhelmed and confused.</p> <p>To save you some time navigating all of that advice and figuring out how to apply it in practice, we did the work for you and provide you with this template! You can use it as is, adapt it, or at least get some inspiration for your projects.</p>"},{"location":"#main-features","title":"Main Features","text":"<p>This template sets up a skeleton for a Python project that:</p> <ul> <li>uses modern state-of-the-art development tools</li> <li>provides a baseline for professional development and maintenance</li> <li>helps following best practices for code and metadata quality</li> <li>contains detailed documentation on how to work with it</li> </ul> <p>It is built to help you adopting good practices and follow recommendations such as:</p> <ul> <li>DLR Software Engineering Guidelines</li> <li>OpenSSF Best Practices</li> <li>Netherlands eScience Center</li> <li>innumerable other resources that can be found online</li> </ul> <p>Furthermore, it implements emerging standards with the goal to improve software metadata and make it more FAIR:</p> <ul> <li>REUSE</li> <li>CITATION.cff</li> <li>CodeMeta</li> </ul> <p>Also see this paper for an overview and recommendations on the state of software citation in academic practice.</p>"},{"location":"#usage","title":"Usage","text":"<p>To get started, please check out the quickstart guide.</p>"},{"location":"#how-to-cite","title":"How to Cite","text":"<p>If you want to cite this project in your scientific work, please use the citation file in the repository.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>We kindly thank all authors and contributors.</p> <p></p> <p>This project was developed at the Institute for Materials Data Science and Informatics (IAS-9) of the J\u00fclich Research Center and funded by the Helmholtz Metadata Collaboration (HMC), an incubator-platform of the Helmholtz Association within the framework of the Information and Data Science strategic initiative.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>Here we provide notes that summarize the most important changes in each released version.</p> <p>Please consult the changelog to inform yourself about breaking changes and security issues.</p>"},{"location":"changelog/#0.3.2","title":"v0.3.2 (2024-08-01)","text":"<ul> <li>updated <code>somesy</code> pre-commit hook to version <code>v0.4.3</code></li> <li>updated project and template dependencies</li> <li>fixed python file imports</li> <li>updated readme with example code</li> <li>updated Contributing document issue</li> </ul>"},{"location":"changelog/#0.3.1","title":"v0.3.1 (2024-07-10)","text":"<ul> <li>update pre-commit hooks to the latest version</li> </ul>"},{"location":"changelog/#0.3.0","title":"v0.3.0 (2024-02-27)","text":"<ul> <li>added support for Windows</li> <li>fixed a bug where instantiation of template fails if no repository URL is provided</li> <li>improve usability and description of some CLI fields</li> </ul>"},{"location":"changelog/#0.2.0","title":"v0.2.0 (2024-01-05)","text":"<ul> <li>Refactored into custom tool <code>fair-python-cookiecutter</code> for more versatility and convenience</li> </ul>"},{"location":"changelog/#0.1.0","title":"v0.1.0 (2023-07-24)","text":"<ul> <li>First release</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the project maintainers by e-mail. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"How To Contribute","text":"<p>All kinds of contributions are very welcome! You can contribute in various ways, e.g. by</p> <ul> <li>providing feedback</li> <li>asking questions</li> <li>suggesting ideas</li> <li>implementing features</li> <li>fixing problems</li> <li>improving documentation</li> </ul> <p>To make contributing to open source projects a good experience to everyone involved, please make sure that you follow our code of conduct when communicating with others.</p>"},{"location":"contributing/#ideas-questions-and-problems","title":"Ideas, Questions and Problems","text":"<p>If you have questions or difficulties using this software, please use the issue tracker.</p> <p>If your topic is not already covered by an existing issue, please create a new issue using one of the provided issue templates.</p> <p>If your issue is caused by incomplete, unclear or outdated documentation, we are also happy to get suggestions on how to improve it. Outdated or incorrect documentation is a bug, while missing documentation is a feature request.</p> <p>NOTE: If you want to report a critical security problem, do not open an issue! Instead, please create a private security advisory, or contact the current package maintainers directly by e-mail.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>This project uses Poetry for dependency management.</p> <p>You can run the following lines to check out the project and prepare it for development:</p> <pre><code>git clone https://github.com/Materials-Data-Science-and-Informatics/fair-python-cookiecutter.git\ncd fair-python-cookiecutter\npoetry install --with docs\npoetry run poe init-dev\n</code></pre> <p>Common tasks are accessible via poe:</p> <ul> <li> <p>Use <code>poetry run poe lint</code> to run linters manually, add <code>--all-files</code> to check everything.</p> </li> <li> <p>Use <code>poetry run poe test</code> to run tests, add <code>--cov</code> to also show test coverage.</p> </li> <li> <p>Use <code>poetry run poe docs</code> to generate local documentation</p> </li> </ul> <p>In order to contribute code, please open a pull request.</p> <p>Before opening the PR, please make sure that your changes</p> <ul> <li>are sufficiently covered by meaningful tests,</li> <li>are reflected in suitable documentation (API docs, guides, etc.), and</li> <li>successfully pass all pre-commit hooks.</li> </ul>"},{"location":"credits/","title":"Authors and Contributors","text":"<p>Main authors are persons whose contributions significantly shaped the state of the software at some point in time.</p> <p>Additional contributors are persons who are not main authors, but contributed non-trivially to this project, e.g. by providing smaller fixes and enhancements to the code and/or documentation.</p> <p>Of course, this is just a rough overview and categorization. For a more complete overview of all contributors and contributions, please inspect the git history of this repository.</p>"},{"location":"credits/#main-authors","title":"Main Authors","text":"<ul> <li>Anton Pirogov (     E-Mail,     ORCID   ): original author</li> </ul>"},{"location":"credits/#additional-contributors","title":"Additional Contributors","text":"<p>... maybe you?</p>"},{"location":"dev_guide/","title":"Developer Guide","text":"<p>This guide is targeting mainly developers, maintainers and other technical contributors and provides more information on how to work with this repository.</p> <p>Important Information</p>"},{"location":"dev_guide/#todo-final-steps","title":"TODO: Final Steps","text":"<p>Dear project author, thank you for using <code>fair-python-cookiecutter</code>!</p> <p>Before diving into your actual project work, please complete the following steps to finalize the configuration of your project repository:</p>"},{"location":"dev_guide/#inspect-the-generated-project-files","title":"Inspect the generated project files","text":"<p>We suggest that first you familiarize yourself with the generated structure and make it \"your own\". The following sections of this guide provide a high-level overview, but you might want to inspect the various files to get a better understanding. A few files contain TODO items or sections -- please complete and remove them.</p>"},{"location":"dev_guide/#test-the-tools-locally","title":"Test the tools locally","text":"<p>After having some idea about the repository structure, we suggest that you try to run some operations, such as linting, running tests and building the documentation on your computer.</p>"},{"location":"dev_guide/#push-the-repository","title":"Push the repository","text":"<p>If you have not created an empty repository in your git hosting service already, you should create it now. Follow the instructions of your hosting service to push an existing repository (i.e. this one), which will consist of</p> <ol> <li>adding the remote repository locally (<code>git remote add ...</code>)</li> <li>pushing the contents to the remote (<code>git push</code>)</li> </ol>"},{"location":"dev_guide/#check-the-ci","title":"Check the CI","text":"<p>Your first push should have automatically triggered the CI pipeline. Please check that it runs successfully.</p>"},{"location":"dev_guide/#set-up-pages-and-releases","title":"Set up Pages and Releases","text":"<p>For deployment of documentation pages and releases of your code, some additional configuration is required. Please consult the corresponding sections of this guide.</p>"},{"location":"dev_guide/#overview","title":"Overview","text":""},{"location":"dev_guide/#repository-structure","title":"Repository Structure","text":"<p>Here is a non-exhaustive list of the most important files and directories in the repository.</p> GeneralMetadataDevelopmentCI / QA <ul> <li><code>AUTHORS.md</code>: acknowledges and lists all contributors</li> <li><code>CHANGELOG.md</code>: summarizes the changes for each version of the software for users</li> <li><code>CODE_OF_CONDUCT.md</code>: defines the social standards that must be followed by contributors</li> <li><code>CONTRIBUTING.md</code>: explains  how others can contribute to the project</li> <li><code>README.md</code>: provides an overview and points to other resources</li> </ul> <ul> <li><code>CITATION.cff</code>: metadata stating how to cite the project</li> <li><code>codemeta.json</code>: metadata for harvesting by other tools and services</li> <li><code>LICENSE</code>: the (main) license of the project</li> <li><code>LICENSES</code>: copies of all licenses that apply to files in the project</li> <li><code>REUSE.toml</code>: granular license and copyright information for all files and directories</li> </ul> <ul> <li><code>pyproject.toml</code>: project metadata, dependencies, development tool configurations</li> <li><code>poetry.lock</code>: needed for reproducible installation of the project</li> <li><code>src</code>: actual code provided by the project</li> <li><code>tests</code>: all tests for the code in the project</li> <li><code>mkdocs.yml</code>: configuration of the project website</li> <li><code>docs</code>: most contents used for the project website</li> </ul> <ul> <li><code>.pre-commit-config.yaml</code>: quality assurance tools used in the project</li> <li><code>.github/workflows</code>: CI scripts for GitHub (QA, documentation and package deployment)</li> <li><code>.github/ISSUE_TEMPLATE</code>: templates for the GitHub issue tracker</li> <li><code>.gitlab-ci.yml</code>: mostly equivalent CI scripts, but for GitLab</li> <li><code>.gitlab/issue_templates</code>: The same issues templates, but for GitLab</li> </ul> <p>Tip</p> <p>You might find various other files popping up which are generated by different tools. Most of these should not be committed into the repository, so they are excluded in the <code>.gitignore</code> file. Everything listed there is safe to delete.</p>"},{"location":"dev_guide/#used-tools","title":"Used Tools","text":"<p>Here is a non-exhaustive list of the most important tools used in the project.</p> GeneralCode QualityFormatting and StyleFAIR metadata <ul> <li><code>poetry</code> for dependency management and packaging</li> <li><code>poethepoet</code> tool for running common tasks</li> <li><code>pre-commit</code> for orchestrating linters, formatters and other utilities</li> <li><code>mkdocs</code> for generating the project documentation website</li> <li><code>mike</code> for managing the <code>mkdocs</code>-generated documentation website</li> </ul> <ul> <li><code>flake8</code> for general linting (using various linter plugins)</li> <li><code>mypy</code> for editor-independent type-checking</li> <li><code>pytest</code> for unit testing</li> <li><code>pytest-cov</code> for computing code coverage by tests</li> <li><code>hypothesis</code> for property-based testing</li> <li><code>bandit</code> for checking security issues in the code</li> <li><code>safety</code> for checking security issues in the current dependencies</li> </ul> <ul> <li><code>black</code> for source-code formatting</li> <li><code>autoflake</code> for automatically removing unused imports</li> <li><code>pydocstyle</code> for checking docstring conventions</li> </ul> <ul> <li><code>cffconvert</code> to check the <code>CITATION.cff</code> (citation metadata)</li> <li><code>codemetapy</code> to generate a <code>codemeta.json</code> (general software metadata)</li> <li><code>somesy</code> to keep all important metadata continuously synchronized</li> <li><code>reuse</code> to check REUSE-compliance (granular copyright and license metadata)</li> <li><code>licensecheck</code> to scan for possible license incompatibilities in the dependencies</li> </ul> <p>Tip</p> <p>Most tools installed and used by this project are listed in the <code>pyproject.toml</code> and <code>.pre-commit-config.yaml</code> files.</p>"},{"location":"dev_guide/#basics","title":"Basics","text":"<p>The project</p> <ul> <li>heavily uses <code>pyproject.toml</code>, which is a recommended standard</li> <li>adopts the <code>src</code> layout, to avoid common problems</li> <li>keeps the actual code (<code>src</code>) and test code (<code>tests</code>) separated</li> </ul> <p>The <code>pyproject.toml</code> is the main configuration file for the project. It contains both general information about the software as well as configuration for various tools.</p> <p>In older software, most of this information is often scattered over many little tool-specific configuration files and a <code>setup.py</code>, <code>setup.cfg</code> and/or <code>requirements.txt</code> file.</p> <p>Tip</p> <p><code>pyproject.toml</code> is the first place your should check when looking for the configuration of some development tool.</p>"},{"location":"dev_guide/#configuration","title":"Configuration","text":"<p>The main tool needed to manage and configure the project is Poetry.</p> <p>Please follow its setup documentation to install it correctly. Poetry should not be installed with <code>pip</code> like other Python tools.</p> <p>Poetry performs many important tasks:</p> <ul> <li>it manages the virtual environment(s) used for the project</li> <li>it manages all the dependencies needed for the code to work</li> <li>it takes care of packaging the code into a <code>pip</code>-installable package</li> </ul> <p>You can find a cheatsheet with the most important commands here and consult its official documentation for detailed information.</p> <p>Note that <code>poetry</code> is only needed for development of the repository. The end-users who just want to install and use this project do not need to set up or know anything about poetry.</p> <p>Tip</p> <p>If you use <code>poetry shell</code> to activate the virtual environment of the project, and the project is already installed with <code>poetry install</code>, in the following you do not have to prepend <code>poetry run</code> in the commands you will see below.</p>"},{"location":"dev_guide/#task-runner","title":"Task Runner","text":"<p>It is a good practice to have a common way for launching different project-related tasks. It removes the need of remembering flags for various tools, and avoids duplication of the same commands in the CI pipelines. If something in a workflow needs to change, it can be changed in just one place, thus reducing the risk of making a mistake.</p> <p>Often projects use a shell script or <code>Makefile</code> for this purpose. This project uses poethepoet, as it integrates nicely with <code>poetry</code>. The tasks are defined in <code>pyproject.toml</code> and can be launched using:</p> <pre><code>poetry run poe TASK_NAME\n</code></pre>"},{"location":"dev_guide/#ci-workflows","title":"CI Workflows","text":"<p>The project contains CI workflows for both GitHub and GitLab.</p> <p>The main CI pipeline runs on each new pushed commit and will</p> <ol> <li>Run all configured code analysis tools,</li> <li>Run code tests with multiple versions of Python,</li> <li>build and deploy the online project documentation website, and</li> <li>if a new version tag was pushed, launch the release workflow</li> </ol>"},{"location":"dev_guide/#quality-control","title":"Quality Control","text":""},{"location":"dev_guide/#static-analysis","title":"Static Analysis","text":"<p>Except for code testing, most tools for quality control are added to the project as <code>pre-commit</code> hooks. The <code>pre-commit</code> tool takes care of installing, updating and running the tools according to the configuration in the <code>.pre-commit-config.yaml</code> file.</p> <p>For every new copy of the repository (e.g. after <code>git clone</code>), <code>pre-commit</code> first must be activated. This is usually done using <code>pre-commit install</code>, which also requires that <code>pre-commit</code> is already available. For more convenience, we simplified the procedure.</p> <p>In this project, you can run:</p> <pre><code>poetry run poe init-dev\n</code></pre> <p>This will make sure that <code>pre-commit</code> is enabled in your repository copy.</p> <p>Once enabled, every time you try to <code>git commit</code> some changed files various tools will run on those (and only those) files.</p> <p>This means that (with some exceptions) <code>pre-commit</code> by default will run only on the changed files that were added to the next commit (i.e., files in the git staging area). These files are usually colored in green when running <code>git status</code>.</p> <ul> <li>Some tools only report the problems they detected</li> <li>Some tools actively modify files (e.g., fix formatting)</li> </ul> <p>In any case, the <code>git commit</code> will fail if a file was modified by a tool, or some problems were reported. In order to complete the commit, you need to</p> <ul> <li>resolve all problems (by fixing them or marking them as false alarm), and</li> <li><code>git add</code> all changed files again (to update the files in the staging area).</li> </ul> <p>After doing that, you can retry to <code>git commit</code> your changes.</p> <p>To avoid having to deal with many issues at once, it is a good habit to run <code>pre-commit</code> by hand from time to time. In this project, this can be done with:</p> <pre><code>poetry run poe lint --all-files\n</code></pre>"},{"location":"dev_guide/#testing","title":"Testing","text":"<p>pytest is used as the main framework for testing.</p> <p>The project uses the <code>pytest-cov</code> plugin to integrate <code>pytest</code> with <code>coverage</code>, which collects and reports test coverage information.</p> <p>In addition to writing regular unit tests with <code>pytest</code>, consider using hypothesis, which integrates nicely with <code>pytest</code> and implements property-based testing - which involves automatic generation of randomized inputs for test cases. This can help to find bugs often found for various edge cases that are easy to overlook in ad-hoc manual tests. Such randomized tests can be a good addition to hand-crafted tests and inputs.</p> <p>To run all tests, either invoke <code>pytest</code> directly, or use the provided task:</p> <pre><code>poetry run poe test\n</code></pre> <p>Tip</p> <p>Add the flag <code>--cov</code> to enable the test coverage tracking and get a table with results after the tests are completed.</p>"},{"location":"dev_guide/#documentation","title":"Documentation","text":"<p>The project uses <code>mkdocs</code> with the popular and excellent <code>mkdocs-material</code> theme to generate the project documentation website, which provides both user and developer documentation.</p> <p><code>mkdocs</code> is configured in the <code>mkdocs.yml</code> file, which we prepared in a way that there is</p> <ul> <li>no need to duplicate sections from files in other places (such as <code>README.md</code>)</li> <li>fully automatic API documentation pages based on Python docstrings in the code</li> <li>a detailed test coverage report is included in the website</li> </ul> <p>The first point is important, because avoiding duplication means avoiding errors whenever text or examples are updated. The second point is convenient, as modules and functions do not need to be added by hand, which is easy to forget. The third point removes the need to use an external service such as CodeCov to store and present code coverage information.</p> <p>As software changes over time and users cannot always keep up with the latest developments, each new version of the software should provide version-specific documentation. To make this both possible as well as convenient, this project uses <code>mike</code> to generate and manage the <code>mkdocs</code> documentation for different versions of the software.</p> <p>Tip</p> <p>You can easily add new pages (e.g. extended tutorials or topic-specific guides) to your documentation website by creating markdown files in the <code>docs/</code> directory and adding them to the <code>nav</code> section in <code>mkdocs.yml</code>.</p>"},{"location":"dev_guide/#offline-documentation","title":"Offline Documentation","text":"<p>You can manually generate a local and fully offline copy of the documentation, which can be useful for e.g. previewing the results during active work on the documentation:</p> <pre><code>poetry install --with docs\npoetry run poe docs\n</code></pre> <p>Once the documentation site is built, run <code>mkdocs serve</code> and open <code>https://localhost:8000</code> in your browser to see the local copy of the website.</p> <p>Tip</p> <p>You probably should always check bigger website updates locally before it is publicly deployed. The automatic pipelines can only catch technical problems, but you still e.g. might want to do some proof-reading.</p>"},{"location":"dev_guide/#online-documentation","title":"Online Documentation","text":"<p>To avoid dependence on additional services such as readthedocs, the project website is set up for simple deployment using GitHub Pages or GitLab Pages.</p> <p>The provided CI pipeline automatically generates the documentation for the latest development version (i.e., current state of the <code>main</code> branch) as well as every released version (i.e., marked by a version tag <code>vX.Y.Z</code>).</p> <p>Publishing the documentation to a website using GitHub or GitLab Pages needs a bit of configuration. Please follow the steps for your respective hosting service.</p> GitLabGitHub <ol> <li>Create a new project access token for GitLab Pages deployment<ul> <li>in your GitLab project, go to Settings &gt; Access Tokens</li> <li>Add a new token with the following settings:<ul> <li>Token name: <code>PAGES_DEPLOYMENT_TOKEN</code></li> <li>Expiration date: (far in the future)</li> <li>Select a role: Maintainer</li> <li>Select scopes: read_repository, write_repository</li> </ul> </li> </ul> </li> <li>Provide the token as a masked(!) variable to the CI pipeline<ul> <li>in your GitLab project, go to Settings &gt; CI/CD</li> <li>in the section Variables add a new variable with<ul> <li>Key: <code>PAGES_TOKEN</code></li> <li>Value: (the token string, as generated in the previous step)</li> <li>enable Mask variable, so your token will not appear in logs</li> </ul> </li> </ul> </li> <li>Ensure that the GitLab pages URL is correct<ul> <li>in your GitLab project, go to Deploy &gt; Pages</li> <li>make sure that Use unique domain is NOT enabled</li> <li>check that under Access pages the URL matches the <code>site_url</code> in your <code>mkdocs.yml</code></li> </ul> </li> </ol> <ul> <li>make sure that you pushed the repository and the CI pipeline completed at least once</li> <li>check that a <code>gh-pages</code> branch exists (created by the CI)</li> <li>go to your GitHub repository Settings and from there to settings for Pages</li> <li>under Build and deployment pick <code>gh-pages</code> as the branch for serving documentation</li> </ul> <p>Important Information</p> <p>When adding any kind of token to your repository configuration, which usually allows code and pipelines to access and modify your project, make sure that the token is protected.</p> <ul> <li>In GitHub, tokens should be always added as secrets</li> <li>In GitLab, tokens should be added as CI variables that are masked</li> </ul> <p>This will make sure that the token will not appear in logs of the CI pipeline runs and minimize the risk of abuse for malicious purposes. NEVER save a token in a text file in your repository!</p> <p>Tip</p> <p>Should anything go wrong and you need to manually access the data of the deployed website, you can find it in the <code>gh-pages</code> or <code>gl-pages</code> branch of the repository. Normally you should not need to use that branch directly, though.</p>"},{"location":"dev_guide/#releases","title":"Releases","text":"<p>From time to time the project is ready for a new release for users.</p>"},{"location":"dev_guide/#creating-a-new-release","title":"Creating a New Release","text":"<p>Before releasing a new version, push the commit the new release should be based on to the upstream repository, and make sure that:</p> <ul> <li>the CI pipeline completes successfully</li> <li>the version number in <code>pyproject.toml</code> is updated, in particular:</li> <li>it must be larger than the previous released version</li> <li>it should adequately reflect the severity of changes</li> <li>the provided user and developer documentation is up-to-date, including:</li> <li>a new section in the <code>CHANGELOG.md</code> file summarizing changes in the new version</li> <li>possibly revised information about contributors and/or maintainers</li> </ul> <p>If this is the case, proceed with the release by:</p> <ul> <li>creating a new tag that matches the version in the <code>pyproject.toml</code>: <code>git tag vX.Y.Z</code></li> <li>pushing the new tag to the upstream repository: <code>git push origin vX.Y.Z</code></li> </ul> <p>The pushed version tag will trigger a pipeline that will:</p> <ul> <li>build and deploy the documentation website for the specific version</li> <li>publish the package to enabled targets (see below)</li> </ul>"},{"location":"dev_guide/#release-targets","title":"Release Targets","text":"<p>The CI pipelines are built in such a way that features can be enabled, disabled and configured easily.</p> GitLabGitHub <p>Targets for releases can be enabled or disabled in the <code>variables</code> section in <code>.gitlab-ci.yml</code>.</p> <p>Targets for releases can be enabled or disabled in <code>.github/workflows/ci.yml</code> and configured by adapting the corresponding actions in <code>.github/workflows/releases.yml</code>.</p>"},{"location":"dev_guide/#github-gitlab-release","title":"GitHub / GitLab Release","text":"<p>By default, the release workflow will create a basic GitHub or GitLab Release that provides a snapshot of the repository as a download. This requires no additional configuration.</p> <p>See here for information on how the Github release can be customized.</p> <p>Note</p> <p>The Github Release can be used to trigger automated software publication of your released versions to Zenodo, based on the metadata provided in the <code>CITATION.cff</code> file.</p>"},{"location":"dev_guide/#pypi-and-compatible-indices","title":"PyPI and Compatible Indices","text":"<p>The CI pipelines support automatic releases to PyPI, Test PyPI or other custom repositories, but in any case this requires a bit of initial configuration.</p> GitLabGitHub <p>For automated releases to PyPI and Test PyPI the project uses the classic token-based workflow.</p> <p>Before the project can be released to PyPI or Test PyPI the first time, a new PyPI API token must be created in the PyPI account of the main project maintainer, and added to your CI as a masked variable, and a variable updated in the <code>.gitlab-ci.yml</code>.</p> <p>The corresponding tokens can be added analogously to the <code>PAGES_TOKEN</code> for online documentation, which was explained here.</p> <p>PyPI:</p> <ul> <li>add the token as a masked CI variable called <code>RELEASE_TOKEN_pypi</code></li> <li>in <code>.gitlab-ci.yml</code>, set <code>release_to_pypi: \"true\"</code></li> </ul> <p>Test PyPI:</p> <ul> <li>add the token as a masked CI variable called <code>RELEASE_TOKEN_testpypi</code></li> <li>in <code>.gitlab-ci.yml</code>, set <code>release_to_testpypi: \"true\"</code></li> </ul> <p>Custom Package Index:</p> <ul> <li>add the token as a masked CI variable called <code>RELEASE_TOKEN_custom</code></li> <li>in <code>.gitlab-ci.yml</code>, set <code>release_to_custom: \"true\"</code></li> <li>update <code>PKGIDX_URL</code> in the <code>release_custom_pypi</code> job to the correct     legacy API endpoint</li> </ul> <p>For automated releases to PyPI and Test PyPI the project uses the new Trusted Publishers workflow that is both more secure and convenient to use than other authorization methods.</p> <p>Before the project can be released to PyPI or Test PyPI the first time, first a pending publisher must be added in the PyPI account of the main project maintainer, using <code>release.yml</code> as the requested workflow name.</p> <p>Note</p> <p>It is important to use the correct workflow name, otherwise the workflow will fail!</p> <p>Once this is done, set the corresponding option (<code>to_pypi</code> / <code>to_test_pypi</code>) to <code>true</code> in the <code>publish</code> job in <code>ci.yml</code> to enable the corresponding publication target.</p> <p>If the old and less secure token-based authentication method is needed or the package should be published to a different PyPI-compatible package index, please adapt <code>release.yml</code> accordingly.</p> <p>If for some reason you do not want to use the CI for the PyPI releases, you can skip these instructions and manually use <code>poetry publish</code> to do the release.</p>"},{"location":"license/","title":"License","text":"<p>Unless stated otherwise, all code provided by this project (excluding external dependencies) is distributed under the following license:</p> <pre><code>MIT License\n\nCopyright (c) 2023 Forschungszentrum J\u00fclich GmbH - Institute for Materials Data Science and Informatics (IAS9) - Stefan Sandfeld &lt;s.sandfeld@fz-juelich.de&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>This project is REUSE compliant. The following detailed license and copyright information in DEP5 format can also be found in the <code>REUSE.toml</code> file in the project source directory:</p> <pre><code>version = 1\nSPDX-PackageName = \"fair-python-cookiecutter\"\nSPDX-PackageSupplier = \"Anton Pirogov &lt;a.pirogov@fz-juelich.de&gt;\"\nSPDX-PackageDownloadLocation = \"https://github.com/Materials-Data-Science-and-Informatics/fair-python-cookiecutter\"\n\n[[annotations]]\npath = [\"{{ cookiecutter**\"]\nprecedence = \"override\"\nSPDX-FileCopyrightText = \"2023 Forschungszentrum J\u00fclich GmbH - Institute for Materials Data Science and Informatics (IAS9) - Stefan Sandfeld &lt;s.sandfeld@fz-juelich.de&gt;\"\nSPDX-License-Identifier = \"CC0-1.0\"\n\n[[annotations]]\npath = [\".gitignore\", \"pyproject.toml\", \"poetry.lock\", \".pre-commit-config.yaml\", \".somesy.toml\", \"codemeta.json\", \"CITATION.cff\", \"README.md\", \"RELEASE_NOTES.md\", \"CHANGELOG.md\", \"CODE_OF_CONDUCT.md\", \"AUTHORS.md\", \"CONTRIBUTING.md\", \".github/**\", \"mkdocs.yml\", \"**.txt\", \"docs/**\", \"REUSE.toml\", \"somesy.toml\"]\nprecedence = \"override\"\nSPDX-FileCopyrightText = \"2023 Forschungszentrum J\u00fclich GmbH - Institute for Materials Data Science and Informatics (IAS9) - Stefan Sandfeld &lt;s.sandfeld@fz-juelich.de&gt;\"\nSPDX-License-Identifier = \"CC0-1.0\"\n\n[[annotations]]\npath = [\"src/**\", \"tests/**\", \"hooks/**\"]\nprecedence = \"override\"\nSPDX-FileCopyrightText = \"2023 Forschungszentrum J\u00fclich GmbH - Institute for Materials Data Science and Informatics (IAS9) - Stefan Sandfeld &lt;s.sandfeld@fz-juelich.de&gt;\"\nSPDX-License-Identifier = \"MIT\"\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#getting-started","title":"Getting Started","text":"<p>Make sure that you have a working Python interpreter in version at least 3.9, <code>git</code> and <code>poetry</code> installed.</p> <p>To install the template, run <code>pip install fair-python-cookiecutter</code>.</p> <p>Now you can use the tool to generate a new Python project:</p> <pre><code>fair-python-cookiecutter YourProjectName\n</code></pre> <p>This will spawn an interactive prompt, where you have to provide some information and make some choices for your new software project. Don't worry, you can always adapt everything later on by hand. After this, your software project will be created in a new directory.</p> <p>To save you some time answering the questions, we recommend that you create an empty repository in GitHub or GitLab of your choice (i.e., the location where you plan to push your new project).</p> <p>If you already have created an empty remote repository or know exactly its future location, you can provide the URL, which already will provide many required inputs:</p> <pre><code>fair-python-cookiecutter --repo-url https://github.com/YourOrganization/YourProjectName\n</code></pre> <p>Your new project repository will also include a copy of a developer guide, containing more information about the structure and features of the generated project.</p> <p>Please familiarize yourself with the generated structures, files and the contents of the developer guide. Feel free to either remove the guide afterwards, or keep (and possibly adjust) it as extended technical project documentation for yourself and other future project contributors.</p> <p>You can find a demo repository generated from this template here.</p>"},{"location":"quickstart/#example-code","title":"Example Code","text":"<p>When you are creating your project, you are asked for several inputs. You can have an example CLI(Command Line Interface) and/or API(Application Programming interface) code within your new project.</p> <p>Lets assume your project name is <code>my-awesome-project</code>.</p> <p>You can run the CLI App with below command. For further usage, please check typer documentation.</p> <pre><code>poetry shell\n\n# Run your CLI App\nmy-awesome-project-cli calculate add 5 2\n</code></pre> <p>You can run the API App with below command.</p> <pre><code>poetry shell\n\n# Run the API program, it will be open for connection\nmy-awesome-project-api\n</code></pre> <p>Now, you can a tool to send a HTTP request for the API. You can open another terminal and run this command</p> <pre><code># send a request that does the same thing as the CLI\ncurl 'http://localhost:8000/calculate/add?x=5&amp;y=2'\n</code></pre> <p>For further usage of the API, please check fastAPI documentation.</p>"},{"location":"quickstart/#configuring-the-template","title":"Configuring the Template","text":"<p>If you intend to use the template a lot, e.g. if you want to use (an adaptation of) this template as the default way to start a Python project for yourself and/or others, you might want to configure some template variables in your <code>~/.cookiecutterrc</code>. Here is an example cookiecutter configuration:</p> <pre><code>fair_python_cookiecutter:\n    last_name: 'Carberry'\n    first_name: 'Josiah'\n    project_keywords: 'psychoceramics analytics'\n    email: 'josiah.carberry@brown.edu'\n    orcid: '0000-0002-1825-0097'\n    affiliation: 'Brown University'\n    copyright_holder: 'Brown University'\n    license: 'MIT'\n</code></pre> <p>This information will be already pre-filled when you use the template, saving you some time and possibly avoiding possible mistakes from manual typing.</p>"},{"location":"quickstart/#modifying-the-template","title":"Modifying the Template","text":"<p>If you want to adjust it to your needs and likings (e.g. add, remove or substitute certain tools), you probably want to fork it to get your own copy. Then you can do the desired changes and use the URL of your template repository instead of this one to kickstart your projects.</p> <p>However, if you think that your changes are of general interest and would improve this template for a majority of users, please get in touch and contribute or suggest an improvement!</p> <p>In any case we are very happy to know about any similar or derivative templates, e.g. for more specific use-cases or based on other tool preferences.</p>"},{"location":"quickstart/#reusing-parts-of-the-template","title":"Reusing Parts of the Template","text":"<p>If you already have an existing project where you would like to introduce things you like from this template, there are two main ways to do so:</p> <ol> <li>move your code into a fresh repository based on this template</li> <li>use parts of the template in your existing project structure</li> </ol> <p>If your project currently has no sophisticated setup of tools or strong preferences about them, option 1 might be the simplest way to adopt the template. Your code then needs to be moved into the <code>YOUR_PROJECT/src/YOUR_PACKAGE</code> subdirectory.</p> <p>On the other hand, if you already have a working setup that you do not wish to replace completely, you can take a look at</p> <ul> <li>the <code>.pre-commit-config.yaml</code> file to adopt some of the quality assurance tools listed there</li> <li>the CI pipelines defined in <code>.github/workflows</code> or <code>.gitlab-ci.yml</code> for automated tests and releases</li> <li>the <code>mkdocs.yml</code> and <code>docs/</code> subdirectory to see how the project website works</li> </ul>"}]}