# List of stages (jobs on the same stage run in parallel). Unused stages are ignored.
# See https://docs.gitlab.com/ee/ci/yaml/#stages
stages:
  - check
  - test
  - docs
  - release

# Set some environment variables based on Gitlab-specific variables
# See https://docs.gitlab.com/ee/ci/variables/
variables:
  # settings for caching
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"

  # release target configuration (triggered by new tags)
  release_to_gitlab: "true"

# Global cache settings for test jobs (each job by default uses own copy of these settings)
# If key files do not change, restore the listed paths from cache (if cached).
# At the end, store those directories in cache.
# See https://docs.gitlab.com/ee/ci/caching/
cache: &global_cache
  key:
    files:
      - poetry.lock
      - .pre-commit-config.yaml
    prefix: $CI_JOB_NAME
  paths:
    - .cache
    - .venv
  policy: pull-push

# Prepare environment with all required tools.
# Defined as hidden job (starting with dot) + YAML anchor (for referencing)
# See https://docs.gitlab.com/ee/ci/yaml/#anchors
.prepare-env-template: &prepare-env
  before_script:
    - pip install pipx==1.2.0
    - pipx ensurepath
    - pipx install poetry
    - export PATH="${PATH}:~/.local/bin"  # put poetry on PATH
    - ln -s ~/.local/bin/poetry /usr/bin/poetry  # for poe (PATH is set only locally)
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install --no-root
    - source .venv/bin/activate

# ----

# Run pre-commit, just to make sure the developers did not mess up.
# It uses its own cache for its isolated environments (location: PRE_COMMIT_HOME).
run-pre-commit:
  image: python:latest
  stage: check
  <<: *prepare-env
  script:
    - poetry run poe lint --all-files
    - pipx install safety
    - safety check -r pyproject.toml

# ----

# Test job template (combine with image(s) containing a specific Python version):
#
# NOTE: it is not possible to easily test against a specific operation system,
# using GitLab CI, as this depends on the used runner (which is usually Linux-based).
.run-pytest-template: &run-pytest
  stage: test
  <<: *prepare-env
  script:
    - poetry install
    - poetry run poe test --cov --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml  # for Gitlab integration of test results

# Tests, instantiated with different Python versions:
run-pytest-3.8:
  image: python:3.8
  <<: *run-pytest
run-pytest-3.9:
  image: python:3.9
  <<: *run-pytest
run-pytest-3.10:
  image: python:3.10
  <<: *run-pytest
run-pytest-3.11:
  image: python:3.11
  <<: *run-pytest

# ----

# Update or push documentation for the current branch or a new tagged release
# See https://github.com/jimporter/mike/issues/25
pages:
  image: python:latest
  stage: docs
  variables:
    PAGES_BRANCH: gl-pages
    HTTPS_REMOTE: https://gitlab-ci-token:${PAGES_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
  <<: *prepare-env
  script:
  - poetry install --with docs
  - |
    echo "Checking that docs build successfully for branch..."
    if poetry run poe docs --verbose; then
      echo "Docs built successfully, proceeding with docs deployment."
    else
      echo "Docs building failed! Aborting docs deployment..."
      exit 1
    fi
  - git config user.name $GITLAB_USER_NAME
  - git config user.email $GITLAB_USER_EMAIL
  - git fetch origin $PAGES_BRANCH && git -b checkout $PAGES_BRANCH origin/$PAGES_BRANCH || git checkout $PAGES_BRANCH || echo "Pages branch not deployed yet."
  - git checkout $CI_COMMIT_SHA
  - DOCS_TAG=${CI_COMMIT_TAG:=$CI_COMMIT_BRANCH}
  - echo Deploying docs for "$DOCS_TAG"
  - mike deploy --deploy-prefix public -r $HTTPS_REMOTE -p -b $PAGES_BRANCH -u $DOCS_TAG latest
  - mike set-default --deploy-prefix public -r $HTTPS_REMOTE -p -b $PAGES_BRANCH latest
  - git checkout $PAGES_BRANCH -- public/
  artifacts:
    paths:
     - public/

# ----

# Create a new GitLab release if a tag is pushed
# https://docs.gitlab.com/ee/user/project/releases/release_cicd_examples.html
release_gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: "$release_to_gitlab == 'true' || $release_to_gitlab == '1'"
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job"
  release:
    # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
