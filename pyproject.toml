[tool.poetry]
# ---- managed by somesy, see .somesy.toml ----
name = "fair-python-cookiecutter"
version = "0.3.2"
description = "An opinionated cookiecutter template to kickstart a modern best-practice Python project with FAIR metadata."
authors = ["Anton Pirogov <a.pirogov@fz-juelich.de>", "Mustafa Soylu <m.soylu@fz-juelich.de>"]
maintainers = ["Mustafa Soylu <m.soylu@fz-juelich.de>"]
license = "MIT"

readme = "README.md"
repository = "https://github.com/Materials-Data-Science-and-Informatics/fair-python-cookiecutter"
homepage = "https://materials-data-science-and-informatics.github.io/fair-python-cookiecutter"
documentation = "https://materials-data-science-and-informatics.github.io/fair-python-cookiecutter"

keywords = ["fair", "metadata", "python", "cookiecutter", "template"]
# ---- managed by somesy, see .somesy.toml ----

classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
]

# the Python packages that will be included in a built distribution:
packages = [{include = "fair_python_cookiecutter", from = "src"}]

# always include basic info for humans and core metadata in the distribution,
# include files related to test and documentation only in sdist:
include = [
  "*.md", "LICENSE", "LICENSES", ".reuse/dep5", "CITATION.cff", "codemeta.json",
  "mkdocs.yml", "docs", "tests",
  { path = "mkdocs.yml", format = "sdist" },
  { path = "docs", format = "sdist" },
  { path = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.8"
cookiecutter = "^2.6.0"
typer = {extras = ["all"], version = "^0.12.3"}
pydantic = "^2.8.2"
typing-extensions = "^4.12.2"
pydantic-yaml = "^1.3.0"
spdx-lookup = "^0.3.3"
platformdirs = "^4.2.2"
importlib-resources = "^6.4.0"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.27.0"
pre-commit = "^3.5.0"
pytest = "^8.3.2"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocstrings = {extras = ["python"], version = "^0.25.2"}
mkdocs-material = "^9.5.30"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.9"
mkdocs-macros-plugin = "^1.0.5"
markdown-include = "^0.8.1"
pymdown-extensions = "^10.9"
markdown-exec = {extras = ["ansi"], version = "^1.9.3"}
mkdocs-coverage = "^1.1.0"
mike = "^2.1.2"
anybadge = "^1.14.0"
interrogate = "^1.7.0"
black = "^24.4.2"

[tool.poetry.scripts]
fair-python-cookiecutter = "fair_python_cookiecutter.cli:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# NOTE: You can run the following with "poetry poe TASK"
[tool.poe.tasks]
init-dev = { shell = "pre-commit install" }
lint = "pre-commit run"  # pass --all-files to check everything
test = "pytest"  # pass --cov to also collect coverage info
docs = "mkdocs build"  # run this to generate local documentation

# Tool Configurations
# -------------------

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "--ignore='src/fair_python_cookiecutter/template'"
# addopts = "--cov-report=term-missing:skip-covered"
filterwarnings = [
"ignore::DeprecationWarning:pkg_resources.*",
"ignore::DeprecationWarning:pyshacl.*",
# Example:
# "ignore::DeprecationWarning:importlib_metadata.*",
]

[tool.coverage.run]
source = ["fair_python_cookiecutter"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff.lint]
# see here: https://docs.astral.sh/ruff/rules/
# ruff by default works like a mix of flake8, autoflake and black
# we extend default linter rules to substitute:
# flake8-bugbear, pydocstyle, isort, flake8-bandit
extend-select = ["B", "D", "I", "S"]
ignore = ["D203", "D213", "D407", "B008", "S101", "D102", "D103"]

[tool.ruff.lint.per-file-ignores]
"**/{tests,docs}/*" = ["ALL"]
